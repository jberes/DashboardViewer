@page "/"
@page "/home"
@using DashboardViewer.Components
@using RevealServer
@using Models.RevealServer
@inject IJSRuntime JSRuntime
@inject IRevealServerService RevealServerService

<div class="row-layout master-view-container">
    <div class="column-layout group">
        <IgbList class="list" master_view-scope>
            @foreach (var item in _revealServerDashboardNames)
            {
               <IgbListItem @onclick="() => ListItemClick(item)">                
                        <IgbCardMedia style="height: 75px; width: 100px;" slot="start">
                            <DashboardThumbnail Info="@item.ThumbnailInfo"></DashboardThumbnail>
                        </IgbCardMedia>
                    <div slot="title">@item.DashboardTitle</div>
                </IgbListItem>
            }
        </IgbList>
    </div>
    <div class="column-layout group_1">
        <div id="revealView" class="reveal-dash-board" style="height: calc(100vh - 15px); width: 100%; position:relative;"></div>
    </div>

    <dialog id="dbSelector" class="modal">
        <div id="thumbnails"></div>
        <button onclick="closeDialog(); console.log('Cancel button clicked');">Cancel</button>
    </dialog>
</div>

@code {
    private string? _selectedDashboard = "Country Orders";
    private List<DashboardNames> _revealServerDashboardNames = new();

    public async void ListItemClick(DashboardNames item)
    {
        this._selectedDashboard = item.DashboardFileName;
        await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", _selectedDashboard);
    }

    protected override async Task OnInitializedAsync()
    {
        _revealServerDashboardNames = await RevealServerService.GetDashboardNamesList();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", _selectedDashboard);
        }
    }

}
